using UnityEngine;

public class FPSPlayerMobil : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float lookSpeed = 2f;
    public float jumpHeight = 2f;

    private CharacterController characterController;
    private Camera playerCamera;
    private float rotationX = 0;

    // Dokunmatik kontrol alanı
    private Vector2 touchStartPos;
    private Vector2 touchCurrentPos;

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        playerCamera = Camera.main;

        // Fareyi gizlemek ve sabitlemek
        Cursor.lockState = CursorLockMode.Locked;
    }

    void Update()
    {
        // Dokunmatik hareket
        HandleTouchMovement();
        HandleLook();
        HandleJump();
        HandleFire();
    }

    // Hareket (dokunmatik ekran için)
    private void HandleTouchMovement()
    {
        if (Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);
            if (touch.phase == TouchPhase.Began)
            {
                touchStartPos = touch.position;
            }
            else if (touch.phase == TouchPhase.Moved)
            {
                touchCurrentPos = touch.position;

                // Yatay hareket
                float moveDirectionX = (touchCurrentPos.x - touchStartPos.x) * moveSpeed * Time.deltaTime;
                // Dikey hareket
                float moveDirectionZ = (touchCurrentPos.y - touchStartPos.y) * moveSpeed * Time.deltaTime;

                // Oyuncuyu hareket ettir
                Vector3 move = transform.right * moveDirectionX + transform.forward * moveDirectionZ;
                characterController.Move(move);
            }
        }
    }

    // Yön değiştirme (dokunmatik ekranla bakış)
    private void HandleLook()
    {
        if (Input.touchCount > 1) // İki parmakla bakış hareketi
        {
            Touch touch = Input.GetTouch(1);

            // Bakış hareketi
            float mouseX = touch.deltaPosition.x;
            float mouseY = touch.deltaPosition.y;

            transform.Rotate(0, mouseX * lookSpeed * Time.deltaTime, 0);

            rotationX -= mouseY * lookSpeed * Time.deltaTime;
            rotationX = Mathf.Clamp(rotationX, -90f, 90f);
            playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, 0);
        }
    }

    // Zıplama (jump)
    private void HandleJump()
    {
        if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)
        {
            if (characterController.isGrounded)
            {
                Vector3 jump = Vector3.up * jumpHeight;
                characterController.Move(jump * Time.deltaTime);
            }
        }
    }

    // Ateş etme (dokunmatik ekran ile)
    private void HandleFire()
    {
        if (Input.touchCount > 1 && Input.GetTouch(1).phase == TouchPhase.Began)
        {
            // Ateş etme işlemi
            Shoot();
        }
    }

    // Ateş etme fonksiyonu
    private void Shoot()
    {
        // Burada ateş etme mekanizmasını implement edebilirsiniz (örneğin, mermi fırlatma, animasyon vs.)
        Debug.Log("Ateş ediliyor!");
    }
}using UnityEngine;
using UnityEngine.UI;

public class HolographicMap : MonoBehaviour
{
    public Text mapText; // UI Text nesnesi, harita gösterimi için.

    void Start()
    {
        if (mapText != null)
        {
            mapText.text = "Pyun Nexus Haritası\n- Burası terkedilmiş bir üs.\n- Hedefe ilerle.";
        }
    }

    void Update()
    {
        // Harita üzerinde belirli etkileşimler veya oyuncunun ilerleyişine göre değişen harita bilgisi eklenebilir.
    }
}
